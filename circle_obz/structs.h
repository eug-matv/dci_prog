
/*Автор: Светлов А.Ю.
         Матвеенко Е.А.
  Дата: 28.09.2007
  Определны структуры:
     initialization - установки программы. Используется везде
        заполнение параметров из инифайла определено в модуле
WorkWithIniFiles (Load_INI_f и Save_INI_f);
    stack_mashtab - для сохранения массштаба. Используется в модуле main_circle;

    airplane - отсчет самолета. Используется при отображении данных в модуле airplanlist;
    airplane_light - описание одного отсчета, используемого при выводе следа. Модуль airplanlist;

   */

#ifndef struct_H
#define struct_H

#include <windows.h>
#include <stdio.h>
#include <string.h>
//#include "formulyars.h"

#define size_stack 10  // размер стэка для хранения параметров масштаба







// структура

// структура
struct initialization
 {

/*Данные недоступные пользователю из программы
Прописаны в PreSetup.ini
*/

//Период обзора (темп обзора)
   float fTempObzora;    //Темп обзора в секундах

//Путь к библиотеке, кооторая работает с данными
  char NameDllFileEvent[1024];   //Путь к библиотеке - которая следит за выполнением программы

//Имя события для охраны
  char SecuriryEventName[50];

//Контроль программы
  int SecurityEventControl;

// Максимальная дальность
  int max_dalnost;   // максимальная дальность, которую охватывает локатор в километрах

//Ругаться на отсутствие входных данных
  int abuse_if_none;



 // Добавил Леха
  int sigma_D_m; // среднеквадратическая ошибка измерений дальности РЛС (в м)
  int sigma_A_min; //Среднеквадратическая ошибка измерений азимута РЛС в минутах
  int strob_dekkart_m; // 400         // размер строба по оси Х в метрах
  double strob_azimuth_g; // 4.5  // погрешность определения координат по азимуту в градусах
  int strob_dalnost_m; // 400  // погрешность определения координат по дальности в метрах
  int N_of_Potery;            //Число обзоров до потеря трассы
  int MaxV_km_ch;            //Максимальное значение скорости
  int MinV_km_ch;            //минимальное значение скорости



//Группа COMDISABLE
  int isUseCOMDisable;  //Использовать COMDISABLE

  //Полный путь к программа comdisable.exe
 char csFullComdisablePath[1024];      //Полный путь к программе без указания имени программы  ComDisable


//добавлено 16.03.2017
//номер байта для получения значения достоверности остатка топлива для УВД
//если равно 0, значение не анализируется
int uvdFuelControlNByte;

//номер бита в байте для получения значения достоверности остатка топлива для УВД
//если равно 0, значение не анализируется
int uvdFuelControlNBit;

//Значение бита определяющей достоверность 0 или 1
int uvdFuelControlValueOfTrue;


//номер байта для получения значения достоверности высоты  для УВД
//если равно 0, значение не анализируется
int uvdAltitudeControlNByte;

// номер бита для  отвечающий за достоверность высоты
int uvdAltitudeControlNBit;

// Значение бита определяющей достоверность 0 или 1
int uvdAltitudeControlValueOfTrue;



//номер байта для получения значения достоверности высоты  для УВД
//если равно 0, значение не анализируется
int uvdNumberControlNByte;

// номер бита для  отвечающий за достоверность высоты
int uvdNumberControlNBit;

// Значение бита определяющей достоверность 0 или 1
int uvdNumberControlValueOfTrue;


//номер байта для получения значения достоверности высоты  для УВД
//если равно 0, значение не анализируется
int rbsAltitudeControlNByte;

// номер бита для  отвечающий за достоверность высоты
int rbsAltitudeControlNBit;

// Значение бита определяющей достоверность 0 или 1
int rbsAltitudeControlValueOfTrue;



//номер байта для получения значения достоверности высоты  для УВД
//если равно 0, значение не анализируется
int rbsNumberControlNByte;

// номер бита для  отвечающий за достоверность высоты
int rbsNumberControlNBit;

// Значение бита определяющей достоверность 0 или 1
int rbsNumberControlValueOfTrue;



//Прописаны в Users.ini
// Цвет  области отображения
   COLORREF Clrbackground;	// цвет фона

//Перья азимутально-дальностной сетки
   LOGPEN Circle;  // здесь же цвет и стиль Опорных колец и линий
   LOGPEN Lines;   // сетки (Основные азимутальные линии)
   LOGPEN DCircle;  // здесь же цвет и стиль Дополнительных колец и линий
   LOGPEN DLines;   // сетки (Дополнительные азимутальные линии)
   LOGPEN Razvertka; // развертка
   LOGPEN Scale; // область масштабирования


   int azimuth_delta; // шаг сетки по азимуту

//Размер и цвет текста, который на сетке выводится
   COLORREF cAzimuthText;  //Цвета для азимутов азимутальных линий
   COLORREF cDalnostText;  //Цвета для дальностей кольцах дальностей



// Плоты
     // Первичный плот
   int radius1;  // радиус окружности
   LOGPEN CirclePen1; // цвет и стиль окружностей
   LOGBRUSH CircleBrush1; // заливка
     // Вторичный плот
   int radius2;  // радиус окружности
   LOGPEN CirclePen2; // цвет и стиль окружностей
   LOGBRUSH CircleBrush2; // заливка
     // Объединенный плот
   int radius3;  // радиус окружности
   LOGPEN CirclePen3; // цвет и стиль окружностей
   LOGBRUSH CircleBrush3; // заливка

//Работа с хвостом
   int iTail;      //А есть ли хвост
   int iTailLength;//Размер хвоста от 1 до 200



// Параметры отображаемого формуляра формуляра
   long szTextOut;     // размер шрифта
   COLORREF cText;     // цвет текста - если равен 0, то цвет согласно отметкам
   int sShir;          // размер формуляра по ширине
   int sVysot;         // размер формуляра по высоте
   int number_symbol_form; // число символов в формуляре

//Введено Матвеенко
   int iRamkaFormulyar;  //0 - не выводить рамку формуляра, 1 - выводить рамку формуляра



   int IsOutFormulyar;  //Вывод формуляра
   int IsOutNomer;
   int IsOutVysota;
   int IsOutTime;
   int IsOutAzimutDalnost;
   int IsOutSkorost;
   int IsOutOstatokTopliva;
   int IsOutVeroyatnostPervKanal;
   int IsOutVeroyatnostVtorKanal;
//   int IsOutSKOPervKanal;
//   int IsOutSKOVtorKanal;





// Ниже добавлено Матвеенко
//Параметры Com-порта
   char csComPortStr[56];   //Параметры порта
   int  iBaudRate;          //Скорость чтения
   int  iStopBits;          //Число стоповых бит 0 - соответстве 1 стопбиту
                            //1 - соответствует 1.5 стопбит
                            //2 - соответствует 2 стопбитам
//Добавленные данные 15.03.2017
   int fParity;             //Разрешение контроля четности:
                          // 0 - нет контрлоля - по умолчанию,
                          //1 - контроль четности


   int parityMode;          //Режим паритера:
                //0 - NOPARITY 1-ODDPARITY 2 - EVENPARITY 3 - MARKPARITY
                //4 - SPACEPARITY    

//Путь к папке куда будут сохранятся файлы по каталогам
//а так же настройки журналирования данных
   char csFullPathToData[255];//Полный путь к файлам (имя должно быть не слишком большим)
   int  IsSaveDataToFile;     //Надо ли вообще сохранять данные в файл
   int  IsSaveSectorsToFile;  //Сохранение секторов в файл
   int  IsFilterDataToFile; //Надо ли запускать фильтр


//Оценка вероятности для первичного канала - за сколько обзоров
//Число обзоров не более 30.
   int N_of_Obzoror_for_prob1;

//Число обзоров дл вторичного канала не более 30
   int N_of_Obzoror_for_prob2;



//Привязка
    int IsSoprovojdenie;  //Сопровождать отметки

 };

// для увеличения/уменьшения масштаба
struct stack_mashtab
  {
  	POINT RLS;
   	double Koef;
  };


struct airplane
 {
// структура самолет
  int type; // (0, 1, 2 - первичный, вторичный, объединенный)
  int mono_lhm; // сигнал МОНО или ЛЧМ для ПРЛ
  float x;  //  координата x в км
  float y;  //  координата y в км
  int alarm;  // сигнал "Бедствие" (1)
  int rejim;  //Режим увд или RBS
  int nomer_borta; // номер борта
  // для вывода формуляра
  float dalnost;  // дальность
  int altitude; // высота
  int abs_altitude; //признак того, что высота абсолютная
  float azimuth;  // азимут
  int fuel;     // остаток топлива
  float velocity; // скорость
  float probability_1; // вероятность обнаружения первичного канала
  float probability_2; // вероятность обнаружения вторичного канала
  float CKO_1_az_dal;  // СКО 1-го канала по азимуту и дальности
  float CKO_2_az_dal;  // СКО 2-го канала по азимуту и дальности

/*
  //Координаты точки - расчитываются во время вывода
  int x_scr, y_scr;
  // координаты формуляра (прямоугольника) на экране
  int formular_left_top_x;    // левый верхний угол формуляра по Х
  int formular_left_top_y;    // левый верхний угол формуляра по У
  int formular_right_bottom_x;  // правый нижний угол формуляра по Х
  int formular_right_bottom_y;  // правый нижний угол формуляра по У


/*Добавлено Матвеенко*/
  int sector30_number;           // номер 30градусного сектора от 0 до 11
  double Time;                   //Время в часах
  int WasTail;                   //Есть ли хвост (след) - передается с этим
  int Formulyar;                 //Выводить ли формуляр  0 - нет, 1 - выводить
                                 //кроме этого в найстроках должно быть указано выводить ли формуляр
  int TransFormulyar;            //1 - прозрачный формуляр, 0 - закрашивающий формуляр
  class TFormulyarDraw *FD;      //Описание формуляра (модуль formulyars)

//Вычисляемые параметры
  int i_x,i_y;  //Координаты в масштабе экрана - вычисляется во время ввода
                //AddTarget

  long lDopNumber;    //Истинный номер не должегн быть равен 0 или меньше 0
  long lNomerTrassy;  //Поиск происходит по номеру трассы
  int N_of_Propusk;    //Число пропусков
                       //Используется для того, чтобы отображать отсчет в следующих
                       //отметках


  long lSectorPrev;   //Указывается  сектор предыдущего отсчета, который имеет такой же номер трассы
  long lIndexPrev;    //Индекс указываюший на соответствующий элемент в индекск
        //Предыдущий индекс отсчета. Если lIndexPrev>10000 - то индекс текущий

  long DeleteIt;  //Если добавляется новый отсчет с таким же номером lNomerTrassy
                  //то необходимо удалить данный отсчет при свапе - значение устанавливается в 0
                  //Если нового отсчета не появляется с таким же номером трассы
                  //то есть значение DeleteIt остается равным 0, тогда увеличивается
                  //значение N_of_Propusk на 1.

  void *GetProbData;  //Данные для получения вероятности


  int FirstDirectionFormulyars;   //Задание направления для формуляра от 0 до 7

//Для мерцания отметки в случаии бедствия
  short flash_bed;

//Указатель для отсчет тмпа PaketStr
  void *PaketStruct;

 };

/*Легкий вариант для хвоста.
Введенно Матвеенко Е.А.
*/
 struct airplane_light
 {
   float x;           //  координата x в км
   float y;           //  координата y в км
   int circle_number; // номер обзора от 1 и до максимального
   int type; // (0, 1, 2 - первичный, вторичный, объединенный)
 // рассчитанные данные
   int i_x, i_y;

/*Введенно в конце декабря*/
   long lDopNumber;        //Истинный номер не должегн быть равен 0 или меньше 0
   long  lNomerTrassy;     //Поиск происходит по номеру трассы
   long lIndexNomerTrassy; //Номер трассы в списке трасс
                           //Указывает индекс на

   long lSectorPrev;   //Указывается  сектор предыдущего отсчета, который имеет такой же номер трассы
   long lIndexPrev;    //Предыдущий индекс отсчета
   int sector30_number; //Номер сектора
   int IsVisible;

 };







#endif
